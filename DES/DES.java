package symmetric;

import util.CryptoTools;
import java.security.Key;
import javax.crypto.Cipher;
import javax.crypto.spec.SecretKeySpec;

public class DES {
	public static void main(String[] args) throws Exception
	{
		byte[] ct = CryptoTools.hexToBytes("BBC2CAC7CE02E9F9F0BC18DE00A1319EC0E66A6A28B5824DF5AE1724CC7178135C1707500602DE53DC566E47F6E3086B03D39C70AAF31F94B75F45735542613B4B37020DE398F29AB60558ACA98073911F190DBC2E8A25DC60FFC6C9ABDE3B7B5250D2AAFF1890A2EE377FE573682042FA0E40FD4CE08510F3B6958CFFC590FA207DF4ABC80861FA37DE22AC63CE1CEFFD03CBAE2A74FD46852870FA443C67E514D8AC98EA5CEB0ED68105FFBEB28431F397835ED540F0C342A6D24C0B198F17086A2416C3662EED715D59C6ED3926BA99ACCCCB7703F2B1CACDE8B5D3F09AE57AF01181237D0E1BBB4991E42A73265F96FB51414EC079855A82D94360E8EDDEA0DE83A0A7488E97DDEBA5C669BFB3984CBCB9D79B43D219B436D9DE8F0CFE75681D01A148D7FC179963F84614FE315CC602F8B194828F56CACDE8B5D3F09AE544ED6A8884AF5AE4FE60AB11A430B6B4D1801C49F6D8CFE16E286FB78E5CF9087569C087D974DE2AD4DE86FBA23E5C9904355A6AE9D523ABFADECAC865CBA8DC68B22EF690675F04C7B8C5B1A2A8D35D1B0E9F7343604BD5ECDD0920A3CC7AF21867DAA75E56FCCB000CA3AE5BE2A28F7F9E2B4D30C2F17A5F0D884543B365D3EE4AFD0C8ECABC6953486D9453A026EE46572EDA575F9AB08E047C225B30E81E20242DEB6CB21F4C5FBDFEE93BA60FA3388017BA250A99F0C13D0790B5CD90DDE3044828CC3FEC0A99FD1B9F3B2D88F05CA145D26E9D6892CCD478606C99B9E635E5FA0423665A237F3A69C58FC63CF8469CF6EC82F2C7045A21AB8B46CAA6A492B0F3AA69B006639A5B2C55FBE06AAD3BE5DEAE017A4EDF4FE2794BEC2D5F4D1F1A857BDBA5D5D3F25BD840A4ADC5E400428F940115E772783D7685F2A8AF53A19490DF0FEB4335C667952BED084C91E297794989E1A28B855F0662988F83E44A07710DB05F206C4E23417F1128C81260077A94BB1F64F327D893D521FA87B6D1CCFEF54D5CF37C6AAB7E13C2D7AEAE49AF4841D264846AF84822492E879A3AC085DA07D7CD11A94C47DA5F4A91567F040E33752EA5C48FA72B5EB14F3A7632240C68E9D366BA5106DF41E1C2424FA69D30F6436F816D876A5A48425F6B96067109E915610858C1328C2C4C6202B105231F2371BFBD9A497D35211629FA77FF7B88B400C434C30082241064EE7D2DFF6918058E950B145F35D136392AA01AE7C435E0F141D745BF013A400987549C5377A5D17F83E3BDC46CB2BAC77DB84D7CAFF33439673AED7D4CEA6F84EA99CBD96A337C992DACCAF9E1E46D13AC5C2327807F680EE5B37EF34AC1334BEDB3014DB51E3788918B359F889E7849AD4EFBA6C6A9CEECCF930CC051A2879B092549336994B52AD6CD36EFF1F2DC663C33AE66D9D24442E72609FDAA31D0C9069ECB16C5868F8E389620DF237D71EE66DCE024753FE214D6C17D3B59F820114AAF5454ED709F67EAD0A2690240EA1A18FF0A028F3499E8CECAA33CE8F190C8275330528BF1CF356C2C9B9E35FC8FB20C778C5D4C3AAA3C531B06945BB73562A7B1EF027D52E37928D5EA6DF2D1B5E07FBE0B9E3A17BE2D4308AFCC5F2899E0310540E8");	
		byte[] ky = CryptoTools.hexToBytes("74686F7573616E64"); 
		byte[] ky2 = new byte[ky.length];
		for(int i =0; i < ky.length; i++) {
			ky2[i] = (byte) ~(ky[i]);
		}
		
		Key secret = new SecretKeySpec(ky, "DES");
		Key secret2 = new SecretKeySpec(ky2, "DES");
		
		Cipher cipher = Cipher.getInstance("DES/ECB/NoPadding");
		
		System.out.println("CT = " + CryptoTools.bytesToHex(ct));
		
		cipher.init(Cipher.DECRYPT_MODE, secret2);
		byte[] bk = cipher.doFinal(ct);
		cipher.init(Cipher.DECRYPT_MODE, secret);
		bk = cipher.doFinal(bk);
		System.out.println("BK = " + new String(bk) + "<");
	}
}
